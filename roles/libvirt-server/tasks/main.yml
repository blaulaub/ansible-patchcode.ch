---
# inspired by https://github.com/sfromm/ansible-playbooks/


- name: ensure libvirt and python tools are installed
  package: name="{{ item }}" state=present
  with_items:
    - python-libvirt
    - python-lxml

- name: ensure libvirt daemon is running
  service:
    name: libvirtd
    state: started
    enabled: yes

- name: get list of virtual networks
  virt_net: command=facts
  register: virt_net_facts

# TODO: define missing nets

# TODO: check and fix net modifications

- name: get list of volume pools and volumes
  virt_pool: command=facts
  register: virt_pool_facts

# TODO: define missing pools

# TODO: check and fix pool modifications

- name: get list of vms
  virt: command=list_vms
  register: virt_vms

- name: get VM definitions
  set_fact: vm_definition="{{virt_guests[item]}}"
  with_items: "{{ virt_host_guests[this_host_label] }}"
  register: vm_definitions

- vars:
    x: "{{item.ansible_facts.vm_definition}}"
  debug: var=x
  with_items:
    - "{{ vm_definitions.results }}"

- debug: var=item.1
  with_subelements:
    - "{{ vm_definitions.results }}"
    - ansible_facts.vm_definition.volumes

- name: create missing volumes
  command: virsh vol-create-as "{{ item.1.pool }}" "{{ item.1.name }}" "{{ item.1.size_in_MB }}"M --format qcow2
  with_subelements:
    - "{{ vm_definitions.results }}"
    - ansible_facts.vm_definition.volumes
  when: item.1.name not in virt_pool_facts.ansible_facts.ansible_libvirt_pools[item.1.pool].volumes

- name: update list of volume pools and volumes
  virt_pool: command=facts
  register: virt_pool_facts

- name: report error on missing volumes
  fail: "It seems that host {{ this_host_label }} pool {{ item.1.pool }} volume {{ item.1.name}} is missing"
  with_subelements:
    - "{{ vm_definitions.results }}"
    - ansible_facts.vm_definition.volumes
  when: item.1.name not in virt_pool_facts.ansible_facts.ansible_libvirt_pools[item.1.pool].volumes

# TODO: the following copy tasks should be executed once per host (when necessary), not once per missing guest

- name: prepare missing debian9 installation resources
  vars:
    definition: "{{ item[0].ansible_facts.vm_definition }}"
    files:
      # TODO the following contains a file (preseed.cfg) with a plain-text password
      - src: debian9/
        dst: /tmp/debian9/
      # TODO the following should be configurable
      - src: /home/cfuchs/.ssh/id_rsa.pub
        dst: /tmp/debian9/authorized_keys
  copy: src="{{ item[1].src }}" dest="{{ item[1].dst }}"
  with_nested:
    - "{{ vm_definitions.results }}"
    - "{{ files }}"
  when: (definition.vm_name not in virt_vms.list_vms) and (definition.os_variant == "debian9")

- name: create missing debian9 vms
  vars:
    definition: "{{ item.ansible_facts.vm_definition }}"
  command: virt-install
           --virt-type kvm
           -n "{{ definition.vm_name }}"
           -r "{{ definition.ram_in_MB }}"
           --vcpus="{{ definition.vcpus }}"
           --cpu qemu64,-svm
           -l "{{ installer_location[definition.os_variant] }}"
           --initrd-inject=/tmp/debian9/preseed.cfg
           --initrd-inject=/tmp/debian9/postinst.sh
           --initrd-inject=/tmp/debian9/authorized_keys
           --disk vol="{{ definition.volumes[0].pool }}/{{ definition.volumes[0].name }},bus=virtio"
           -w network=localnet7,mac="{{ definition.mac }}",model=virtio
           --os-type "{{ definition.os_type }}"
           --os-variant "{{ definition.os_variant }}"
           --controller usb,model=none
           --graphics none
           --extra-args "auto=true hostname={{ definition.hostname }} domain={{ network_mappings[definition.network_label].domain }} console=ttyS0"
           --noautoconsole
           --wait=-1
  with_items:
    - "{{ vm_definitions.results }}"
  when: (definition.vm_name not in virt_vms.list_vms) and (definition.os_variant == "debian9")

# TODO? now the installation runs, and eventually finishes or fails. how do we know?

# TODO switch ansible-agent from password to ssh key

# TODO prepare swap partition

# TODO include swap partition

...
