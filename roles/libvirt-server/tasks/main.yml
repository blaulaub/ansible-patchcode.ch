---
# inspired by https://github.com/sfromm/ansible-playbooks/


- name: ensure libvirt and python tools are installed
  package: name="{{ item }}" state=present
  with_items:
    - python-libvirt
    - python-lxml
    - python-jmespath

- name: ensure libvirt daemon is running
  service:
    name: libvirtd
    state: started
    enabled: yes

- name: get list of virtual networks
  virt_net: command=facts
  register: virt_net_facts

# TODO: define missing nets

# TODO: check and fix net modifications

- name: get list of volume pools and volumes
  virt_pool: command=facts
  register: virt_pool_facts

# TODO: define missing pools

# TODO: check and fix pool modifications

- name: get list of vms
  virt: command=list_vms
  register: virt_vms

- name: get VM definitions
  set_fact: vm_definition="{{virt_guests[item]}}"
  with_items: "{{ virt_host_guests[this_host_label] }}"
  register: vm_definitions

- name: check presence of defined VMs
  set_fact: present=yes
  with_items:
    - "{{ vm_definitions.results | json_query('[*].ansible_facts.vm_definition') }}"
  when: item.vm_name in virt_vms.list_vms
  register: vm_definitions_presence

- name: list VMs to install
  debug: var=item
  with_items:
    - "{{ vm_definitions_presence.results | json_query('[?skipped].item') }}"

- name: create missing volumes
  command: virsh vol-create-as "{{ item.1.pool }}" "{{ item.1.name }}" "{{ item.1.size_in_MB }}"M --format qcow2
  with_subelements:
    - "{{ vm_definitions_presence.results | json_query('[?skipped].item') }}"
    - volumes
  when: item.1.name not in virt_pool_facts.ansible_facts.ansible_libvirt_pools[item.1.pool].volumes

- name: update list of volume pools and volumes
  virt_pool: command=facts
  register: virt_pool_facts

- name: report error on missing volumes
  fail: "It seems that host {{ this_host_label }} pool {{ item.1.pool }} volume {{ item.1.name}} is missing"
  with_subelements:
    - "{{ vm_definitions_presence.results | json_query('[?skipped].item') }}"
    - volumes
  when: item.1.name not in virt_pool_facts.ansible_facts.ansible_libvirt_pools[item.1.pool].volumes

- name: prepare missing installation resources (folder)
  file: path=/tmp/{{ item }} state=directory
  with_items:
    - "{{ vm_definitions_presence.results | json_query('[?skipped].item.os_variant') | unique }}"

- name: prepare missing installation resources (templates)
  vars:
    templates:
      - src: postinst.sh.j2
        dst: postinst.sh
      - src: preseed.cfg.j2
        dst: preseed.cfg
  template: src="{{ item[0] }}/{{ item[1].src }}" dest="/tmp/{{ item[0] }}/{{ item[1].dst }}"
  with_nested:
    - "{{ vm_definitions_presence.results | json_query('[?skipped].item.os_variant') | unique }}"
    - "{{ templates }}"

- name: prepare missing debian9 installation resources (copies)
  vars:
    files:
      # TODO the following should be configurable
      - src: /home/cfuchs/.ssh/id_rsa.pub
        dst: authorized_keys
  copy: src="{{ item[1].src }}" dest="/tmp/{{ item[0] }}/{{ item[1].dst }}"
  with_nested:
    - "{{ vm_definitions_presence.results | json_query('[?skipped].item.os_variant') | unique }}"
    - "{{ files }}"

- name: create missing debian9 vms
  command: virt-install
           --virt-type kvm
           -n "{{ item.vm_name }}"
           -r "{{ item.ram_in_MB }}"
           --vcpus="{{ item.vcpus }}"
           --cpu qemu64,-svm
           -l "{{ installer_location[item.os_variant] }}"
           --initrd-inject=/tmp/debian9/preseed.cfg
           --initrd-inject=/tmp/debian9/postinst.sh
           --initrd-inject=/tmp/debian9/authorized_keys
           --disk vol="{{ item.volumes[0].pool }}/{{ item.volumes[0].name }},bus=virtio"
           -w network=localnet7,mac="{{ item.mac }}",model=virtio
           --os-type "{{ item.os_type }}"
           --os-variant "{{ item.os_variant }}"
           --controller usb,model=none
           --graphics none
           --extra-args "auto=true hostname={{ item.hostname }} domain={{ network_mappings[item.network_label].domain }} console=ttyS0"
           --noautoconsole
           --wait=-1
  with_items:
    - "{{ vm_definitions_presence.results | json_query('[?skipped].item') }}"
  when: (item.os_variant == "debian9")

# TODO? now the installation runs, and eventually finishes or fails. how do we know?

# TODO switch ansible agent from password to ssh key

# TODO prepare swap partition

# TODO include swap partition

...
